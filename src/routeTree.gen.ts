/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermOfServiceImport } from './routes/term-of-service'
import { Route as PrivacyPolicyImport } from './routes/privacy-policy'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthScholarshipSearchImport } from './routes/_auth.scholarship-search'
import { Route as AuthScholarshipMatchingScholarshipIdImport } from './routes/_auth.scholarship-matching.$scholarshipId'
import { Route as AuthProfileUserIdImport } from './routes/_auth.profile.$userId'

// Create/Update Routes

const TermOfServiceRoute = TermOfServiceImport.update({
  id: '/term-of-service',
  path: '/term-of-service',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyPolicyRoute = PrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthScholarshipSearchRoute = AuthScholarshipSearchImport.update({
  id: '/scholarship-search',
  path: '/scholarship-search',
  getParentRoute: () => AuthRoute,
} as any)

const AuthScholarshipMatchingScholarshipIdRoute =
  AuthScholarshipMatchingScholarshipIdImport.update({
    id: '/scholarship-matching/$scholarshipId',
    path: '/scholarship-matching/$scholarshipId',
    getParentRoute: () => AuthRoute,
  } as any)

const AuthProfileUserIdRoute = AuthProfileUserIdImport.update({
  id: '/profile/$userId',
  path: '/profile/$userId',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyImport
      parentRoute: typeof rootRoute
    }
    '/term-of-service': {
      id: '/term-of-service'
      path: '/term-of-service'
      fullPath: '/term-of-service'
      preLoaderRoute: typeof TermOfServiceImport
      parentRoute: typeof rootRoute
    }
    '/_auth/scholarship-search': {
      id: '/_auth/scholarship-search'
      path: '/scholarship-search'
      fullPath: '/scholarship-search'
      preLoaderRoute: typeof AuthScholarshipSearchImport
      parentRoute: typeof AuthImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/_auth/profile/$userId': {
      id: '/_auth/profile/$userId'
      path: '/profile/$userId'
      fullPath: '/profile/$userId'
      preLoaderRoute: typeof AuthProfileUserIdImport
      parentRoute: typeof AuthImport
    }
    '/_auth/scholarship-matching/$scholarshipId': {
      id: '/_auth/scholarship-matching/$scholarshipId'
      path: '/scholarship-matching/$scholarshipId'
      fullPath: '/scholarship-matching/$scholarshipId'
      preLoaderRoute: typeof AuthScholarshipMatchingScholarshipIdImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthScholarshipSearchRoute: typeof AuthScholarshipSearchRoute
  AuthProfileUserIdRoute: typeof AuthProfileUserIdRoute
  AuthScholarshipMatchingScholarshipIdRoute: typeof AuthScholarshipMatchingScholarshipIdRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthScholarshipSearchRoute: AuthScholarshipSearchRoute,
  AuthProfileUserIdRoute: AuthProfileUserIdRoute,
  AuthScholarshipMatchingScholarshipIdRoute:
    AuthScholarshipMatchingScholarshipIdRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/term-of-service': typeof TermOfServiceRoute
  '/scholarship-search': typeof AuthScholarshipSearchRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/profile/$userId': typeof AuthProfileUserIdRoute
  '/scholarship-matching/$scholarshipId': typeof AuthScholarshipMatchingScholarshipIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/term-of-service': typeof TermOfServiceRoute
  '/scholarship-search': typeof AuthScholarshipSearchRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/profile/$userId': typeof AuthProfileUserIdRoute
  '/scholarship-matching/$scholarshipId': typeof AuthScholarshipMatchingScholarshipIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/term-of-service': typeof TermOfServiceRoute
  '/_auth/scholarship-search': typeof AuthScholarshipSearchRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/_auth/profile/$userId': typeof AuthProfileUserIdRoute
  '/_auth/scholarship-matching/$scholarshipId': typeof AuthScholarshipMatchingScholarshipIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/privacy-policy'
    | '/term-of-service'
    | '/scholarship-search'
    | '/auth/login'
    | '/auth/register'
    | '/profile/$userId'
    | '/scholarship-matching/$scholarshipId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/privacy-policy'
    | '/term-of-service'
    | '/scholarship-search'
    | '/auth/login'
    | '/auth/register'
    | '/profile/$userId'
    | '/scholarship-matching/$scholarshipId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/privacy-policy'
    | '/term-of-service'
    | '/_auth/scholarship-search'
    | '/auth/login'
    | '/auth/register'
    | '/_auth/profile/$userId'
    | '/_auth/scholarship-matching/$scholarshipId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  TermOfServiceRoute: typeof TermOfServiceRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  TermOfServiceRoute: TermOfServiceRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/privacy-policy",
        "/term-of-service",
        "/auth/login",
        "/auth/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/scholarship-search",
        "/_auth/profile/$userId",
        "/_auth/scholarship-matching/$scholarshipId"
      ]
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.tsx"
    },
    "/term-of-service": {
      "filePath": "term-of-service.tsx"
    },
    "/_auth/scholarship-search": {
      "filePath": "_auth.scholarship-search.tsx",
      "parent": "/_auth"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/_auth/profile/$userId": {
      "filePath": "_auth.profile.$userId.tsx",
      "parent": "/_auth"
    },
    "/_auth/scholarship-matching/$scholarshipId": {
      "filePath": "_auth.scholarship-matching.$scholarshipId.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
